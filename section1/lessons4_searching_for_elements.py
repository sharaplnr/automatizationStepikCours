'''
Части элементов страницы HTML, по которым можно найти элемент
- id
- class
- name
- tag
- значение атрибута

Поиск по
- id → #{id-элемента}
- tag → h1
- поиск по значению атрибута элемента → [attribute={value}] -- используются для тех атрибутов элементов, у которых нет
коротких команд
- name → [name="{name-элемента}"]
- class → .{class-элемента} / [class="{class-элемента}"] -- вариант в скобках ищет полное совпадение значение атрибута
вариант с короткой командой, ищет вхождение класса в элемент. Команда для перечисления всех значений класса элемента
.lead.text-muted

"Селектор" → Выбирать

Поиск потомков (examples):
#posts title

Поиск дочерних элементов:
#posts > title

Поиск элементов с помощью XPath - язык запросов, гибкий и мощный инструмент для написания сложных запрос для поиск элемен-
та. Использует древовидную структуру документа.

XPath (XML Path Language)

Запрос всегда начинается с / или //, / → >, // → " "

когда начинаем запрос с символа /, мы должны указать элемент, являющийся корнем нашего документа /html/body/header
когда начинаем запрос с символа //, будет означать, что мы хотим найти всех потомков корневого элемента без указания
корневого элемента //header

Символ [] - команда фильтрации, которая позволяет отфильтровать в случае нахождения несколько элементов по конкретному
значению

Правила фильтрации:
- по любому атрибуты //img[@id="bullet"]
- по порядковому номеру //div[@class="row"]/div[2]
- по полному совпадению текста //p[text()="Lenin cat"]
- по частичному совпадению текст или атрибута //p[contains(text(), "cat")]
//div[contains(@class, "navbar")]
- можно использовать булевы операции and, or, not и некоторые простые ариф. выражения:
//img[@name = "bullet-cat" and @data-type="animal"]

Символ * - команда выбора всех элементов
Поиск по классу в XPath регистрозависим

Полезно знать:
1. Не используйте селекторы вида //div[1]/div[2]/div[3] без крайней нужды: по такому селектору невозможно с первого раза
 понять, что за элемент вы ищете. А когда структура страницы хоть немного изменится, то ваш селектор с большой
 вероятностью перестанет работать;
2. Если есть возможность использовать CSS-селекторы: сlass, id или name — лучше использовать их вместо поиска по XPath;
3. Можно искать по полному или частичному совпадению текста или любого атрибута;
4. Можно использовать булевы операции и простую арифметику;
5. Можно удобно перемещаться по структуре документа (переходить к потомкам и к родителям);
6. Подойдет, когда у сайта всё плохо с атрибутами и нет возможности достучаться до разработчиков;
7. Есть мнение, что поиск по XPath в среднем медленнее, чем по css. Но достоверно это неизвестно;
8. Не стоит использовать разные расширения для браузеров по поиску XPath: они подбирают нечитабельные и переусложненные
селекторы. Лучше потратить немного времени и разобраться в синтаксисе самостоятельно, тем более, что он не очень сложный

Ссылки:

https://www.w3schools.com/xml/xpath_syntax.asp

https://msdn.microsoft.com/ru-ru/library/ms256086(v=vs.120).aspx

https://msiter.ru/tutorials/xpath/syntax

https://habr.com/post/114772/

https://testerslittlehelper.wordpress.com/2016/07/10/real-xpath/


'''